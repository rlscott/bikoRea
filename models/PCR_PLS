#*************************************************************************
#*PCR and PLS
#************************************************************************


y<- bike_train$rented_bikes
X <- bike_train[,2:16]

cy<-y-mean(y)
SX<-as.matrix(scale(X)) # standardize X (squared norm of each column is N-1)
svdX<-svd(SX)
u1<-svdX$u[,1]
v1<-svdX$v[,1]
d1<-svdX$d[1]

y_pcr<-sum(y*u1)*u1
beta_pcr<-sum(y*(SX%*%v1))*v1/(d1^2)
round(y_pcr, 3)
beta_pcr

z1<-SX%*%t(SX)%*%cy
y_pls<-sum(cy*z1)/sum(z1^2)*z1
beta_pls<-solve(t(SX)%*%SX)%*%t(SX)%*%y_pls
as.vector(round(y_pls, 3))
beta_pls

install.packages("pls")
library(pls)


###################### PCR  ##############################

library(caret)
pcrTune.LOO <- train(y=cy, x=bike_train[,2:16], method="pcr",
                   preProcess = c("center","scale"), ## standardize input variables 
                   tuneGrid=data.frame(ncomp=1:15),
                   trControl=trainControl(method="LOOCV"))
pcrTune.LOO$results
plot(pcrTune.LOO)
which.min(pcrTune.LOO$results$RMSE)


###################### PLS  ##############################

plsTune.LOO<-train(y=cy, x=bike_train[,2:16], method="pls",
                   preProcess = c("center","scale"), ## standardize input variables 
                   tuneGrid=data.frame(ncomp=1:15),
                   trControl=trainControl(method="LOOCV"))
plsTune.LOO$results
plot(plsTune.LOO)
which.min(plsTune.LOO$results$RMSE)
